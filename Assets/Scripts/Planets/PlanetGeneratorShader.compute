#pragma kernel cs_main

struct Point
{
    float x;
    float y;
    float value;
    int is_set;
    float iso_level;
};

RWStructuredBuffer<Point> point_field;
float resolution;
float planet_diameter;
float planet_radius;
float surface_noise_strength;
float surface_noise_scale;
float outer_noise_scale;
float inner_noise_scale;
float outer_iso_level;
float inner_iso_level;
float core_position_x;
float core_position_y;
float surface_noise_origin_x;
float surface_noise_origin_y;
float outer_noise_origin_x;
float outer_noise_origin_y;
float inner_noise_origin_x;
float inner_noise_origin_y;

// Unity's noise functions ------------------------------------------------------------------------
float2 unity_gradient_noise_dir(float2 p)
{
    p = p % 289;
    float x = (34 * p.x + 1) * p.x % 289 + p.y;
    x = (34 * x + 1) * x % 289;
    x = frac(x / 41) * 2 - 1;
    return normalize(float2(x - floor(x + 0.5), abs(x) - 0.5));
}

float unity_gradient_noise(float2 p)
{
    const float2 ip = floor(p);
    float2 fp = frac(p);
    const float d00 = dot(unity_gradient_noise_dir(ip), fp);
    const float d01 = dot(unity_gradient_noise_dir(ip + float2(0, 1)), fp - float2(0, 1));
    const float d10 = dot(unity_gradient_noise_dir(ip + float2(1, 0)), fp - float2(1, 0));
    const float d11 = dot(unity_gradient_noise_dir(ip + float2(1, 1)), fp - float2(1, 1));
    fp = fp * fp * fp * (fp * (fp * 6 - 15) + 10);
    return lerp(lerp(d00, d01, fp.y), lerp(d10, d11, fp.y), fp.x);
}

void unity_gradient_noise_float(const float2 uv, const float scale, out float Out)
{
    Out = unity_gradient_noise(uv * scale) + 0.5;
}
// Unity's noise functions ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

float2 get_point_relative_position(float2 coords)
{
    float x = coords.x * (planet_diameter / resolution) - planet_radius;
    float y = coords.y * (planet_diameter / resolution) - planet_radius;
    return float2(x, y);
}

float get_surface_point_addition(float2 coords)
{
    float xc = surface_noise_origin_x + coords.x / resolution;
    float yc = surface_noise_origin_y + coords.y / resolution;
    float surface_normalized;
    
    unity_gradient_noise_float(float2(xc, yc), surface_noise_scale, surface_normalized);
    
    return  surface_normalized * surface_noise_strength;
}

float get_float2_magnitude(float2 v)
{
    const float x = v.x * v.x;
    const float y = v.y * v.y;
    return sqrt(x + y);
}

float get_float2_distance(const float2 a, const float2 b)
{
    return get_float2_magnitude(a - b);
}

Point compute_point(const float iter_x, const float iter_y, float2 point_pos, float2 point_relative_position)
{
    // Calculate point distance from the core
    //float distance_percentage = get_float2_magnitude(point_relative_position) / planet_radius;
                
    // Blend between outer and inner noise
    //float v = blendBias.Evaluate(distance_percentage);
    const float v = 0.5;
    const float noise_x = lerp(inner_noise_origin_x, outer_noise_origin_x, v);
    const float noise_y = lerp(inner_noise_origin_y, outer_noise_origin_y, v);
    const float scale = lerp(inner_noise_scale, outer_noise_scale, v);

    const float2 noise_coords = float2(noise_x + iter_x / resolution * scale, noise_y + iter_y / resolution * scale);
    float noise_value;
    unity_gradient_noise_float(noise_coords, 1, noise_value);

    Point point_data;
    point_data.x = point_pos.x;
    point_data.y = point_pos.y;
    point_data.value = noise_value;
    point_data.is_set = 1;
    point_data.iso_level = lerp(inner_iso_level, outer_iso_level, v);

    return point_data;
}

// Main ----------------------------------------------

[numthreads(8,8,1)]
void cs_main (uint3 id : SV_DispatchThreadID)
{
    const float2 point_relative_position = get_point_relative_position(float2(id.x, id.y));
    const float2 core_position = float2(core_position_x, core_position_y);
    const float2 point_pos = core_position + point_relative_position;
                
    // Restrict points to a circle (+- some surface noise)
    const float surface_addition = get_surface_point_addition(float2(id.x, id.y));
    const float surface_height = planet_radius - surface_noise_strength + surface_addition;
    const float point_radial_distance = get_float2_distance(point_pos, core_position);

    if (point_radial_distance > surface_height) return;

    const int idx = resolution * id.y + id.x - 1;

    point_field[idx] = compute_point(id.x, id.y, point_pos, point_relative_position);

    // Make outer most points into air to prevent a tiled surface
    if (point_radial_distance > surface_height - 2)
    {
        point_field[idx].value = 1;
    }
}
